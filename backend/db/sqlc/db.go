// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAISessionStmt, err = db.PrepareContext(ctx, createAISession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAISession: %w", err)
	}
	if q.createDelegateStmt, err = db.PrepareContext(ctx, createDelegate); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDelegate: %w", err)
	}
	if q.createParameterStmt, err = db.PrepareContext(ctx, createParameter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateParameter: %w", err)
	}
	if q.createScoreStmt, err = db.PrepareContext(ctx, createScore); err != nil {
		return nil, fmt.Errorf("error preparing query CreateScore: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createSheetStmt, err = db.PrepareContext(ctx, createSheet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSheet: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteDelegateStmt, err = db.PrepareContext(ctx, deleteDelegate); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDelegate: %w", err)
	}
	if q.deleteExpiredAISessionsStmt, err = db.PrepareContext(ctx, deleteExpiredAISessions); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpiredAISessions: %w", err)
	}
	if q.deleteParameterStmt, err = db.PrepareContext(ctx, deleteParameter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteParameter: %w", err)
	}
	if q.deleteScoreStmt, err = db.PrepareContext(ctx, deleteScore); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteScore: %w", err)
	}
	if q.deleteSessionByIDStmt, err = db.PrepareContext(ctx, deleteSessionByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSessionByID: %w", err)
	}
	if q.deleteSessionsByUserIDStmt, err = db.PrepareContext(ctx, deleteSessionsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSessionsByUserID: %w", err)
	}
	if q.deleteSheetStmt, err = db.PrepareContext(ctx, deleteSheet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSheet: %w", err)
	}
	if q.deleteSheetsByUserIDStmt, err = db.PrepareContext(ctx, deleteSheetsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSheetsByUserID: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getAISessionsByUserIDStmt, err = db.PrepareContext(ctx, getAISessionsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAISessionsByUserID: %w", err)
	}
	if q.getDelegateByIDStmt, err = db.PrepareContext(ctx, getDelegateByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetDelegateByID: %w", err)
	}
	if q.getDelegateByScoreSheetIDAndNameStmt, err = db.PrepareContext(ctx, getDelegateByScoreSheetIDAndName); err != nil {
		return nil, fmt.Errorf("error preparing query GetDelegateByScoreSheetIDAndName: %w", err)
	}
	if q.getDelegatesByScoreSheetIDStmt, err = db.PrepareContext(ctx, getDelegatesByScoreSheetID); err != nil {
		return nil, fmt.Errorf("error preparing query GetDelegatesByScoreSheetID: %w", err)
	}
	if q.getParameterByIDStmt, err = db.PrepareContext(ctx, getParameterByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetParameterByID: %w", err)
	}
	if q.getParameterByScoreSheetIDAndNameStmt, err = db.PrepareContext(ctx, getParameterByScoreSheetIDAndName); err != nil {
		return nil, fmt.Errorf("error preparing query GetParameterByScoreSheetIDAndName: %w", err)
	}
	if q.getParametersByScoreSheetIDStmt, err = db.PrepareContext(ctx, getParametersByScoreSheetID); err != nil {
		return nil, fmt.Errorf("error preparing query GetParametersByScoreSheetID: %w", err)
	}
	if q.getScoreByIDStmt, err = db.PrepareContext(ctx, getScoreByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetScoreByID: %w", err)
	}
	if q.getScoresByDelegateIDStmt, err = db.PrepareContext(ctx, getScoresByDelegateID); err != nil {
		return nil, fmt.Errorf("error preparing query GetScoresByDelegateID: %w", err)
	}
	if q.getScoresByParameterIDStmt, err = db.PrepareContext(ctx, getScoresByParameterID); err != nil {
		return nil, fmt.Errorf("error preparing query GetScoresByParameterID: %w", err)
	}
	if q.getSessionByIDStmt, err = db.PrepareContext(ctx, getSessionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByID: %w", err)
	}
	if q.getSessionsByRefreshTokenStmt, err = db.PrepareContext(ctx, getSessionsByRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionsByRefreshToken: %w", err)
	}
	if q.getSessionsByUserIDStmt, err = db.PrepareContext(ctx, getSessionsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionsByUserID: %w", err)
	}
	if q.getSheetByIDStmt, err = db.PrepareContext(ctx, getSheetByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSheetByID: %w", err)
	}
	if q.getSheetWithDetailsByIDStmt, err = db.PrepareContext(ctx, getSheetWithDetailsByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSheetWithDetailsByID: %w", err)
	}
	if q.getSheetsByUserIDStmt, err = db.PrepareContext(ctx, getSheetsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSheetsByUserID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.touchScoreSheetStmt, err = db.PrepareContext(ctx, touchScoreSheet); err != nil {
		return nil, fmt.Errorf("error preparing query TouchScoreSheet: %w", err)
	}
	if q.updateDelegateNameStmt, err = db.PrepareContext(ctx, updateDelegateName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDelegateName: %w", err)
	}
	if q.updateParameterStmt, err = db.PrepareContext(ctx, updateParameter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateParameter: %w", err)
	}
	if q.updateScoreStmt, err = db.PrepareContext(ctx, updateScore); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateScore: %w", err)
	}
	if q.updateSessionExpirationStmt, err = db.PrepareContext(ctx, updateSessionExpiration); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionExpiration: %w", err)
	}
	if q.updateSheetStmt, err = db.PrepareContext(ctx, updateSheet); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSheet: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.verifyUserEmailStmt, err = db.PrepareContext(ctx, verifyUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query VerifyUserEmail: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAISessionStmt != nil {
		if cerr := q.createAISessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAISessionStmt: %w", cerr)
		}
	}
	if q.createDelegateStmt != nil {
		if cerr := q.createDelegateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDelegateStmt: %w", cerr)
		}
	}
	if q.createParameterStmt != nil {
		if cerr := q.createParameterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createParameterStmt: %w", cerr)
		}
	}
	if q.createScoreStmt != nil {
		if cerr := q.createScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createScoreStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createSheetStmt != nil {
		if cerr := q.createSheetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSheetStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteDelegateStmt != nil {
		if cerr := q.deleteDelegateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDelegateStmt: %w", cerr)
		}
	}
	if q.deleteExpiredAISessionsStmt != nil {
		if cerr := q.deleteExpiredAISessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpiredAISessionsStmt: %w", cerr)
		}
	}
	if q.deleteParameterStmt != nil {
		if cerr := q.deleteParameterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteParameterStmt: %w", cerr)
		}
	}
	if q.deleteScoreStmt != nil {
		if cerr := q.deleteScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteScoreStmt: %w", cerr)
		}
	}
	if q.deleteSessionByIDStmt != nil {
		if cerr := q.deleteSessionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionByIDStmt: %w", cerr)
		}
	}
	if q.deleteSessionsByUserIDStmt != nil {
		if cerr := q.deleteSessionsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionsByUserIDStmt: %w", cerr)
		}
	}
	if q.deleteSheetStmt != nil {
		if cerr := q.deleteSheetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSheetStmt: %w", cerr)
		}
	}
	if q.deleteSheetsByUserIDStmt != nil {
		if cerr := q.deleteSheetsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSheetsByUserIDStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getAISessionsByUserIDStmt != nil {
		if cerr := q.getAISessionsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAISessionsByUserIDStmt: %w", cerr)
		}
	}
	if q.getDelegateByIDStmt != nil {
		if cerr := q.getDelegateByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDelegateByIDStmt: %w", cerr)
		}
	}
	if q.getDelegateByScoreSheetIDAndNameStmt != nil {
		if cerr := q.getDelegateByScoreSheetIDAndNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDelegateByScoreSheetIDAndNameStmt: %w", cerr)
		}
	}
	if q.getDelegatesByScoreSheetIDStmt != nil {
		if cerr := q.getDelegatesByScoreSheetIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDelegatesByScoreSheetIDStmt: %w", cerr)
		}
	}
	if q.getParameterByIDStmt != nil {
		if cerr := q.getParameterByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParameterByIDStmt: %w", cerr)
		}
	}
	if q.getParameterByScoreSheetIDAndNameStmt != nil {
		if cerr := q.getParameterByScoreSheetIDAndNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParameterByScoreSheetIDAndNameStmt: %w", cerr)
		}
	}
	if q.getParametersByScoreSheetIDStmt != nil {
		if cerr := q.getParametersByScoreSheetIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParametersByScoreSheetIDStmt: %w", cerr)
		}
	}
	if q.getScoreByIDStmt != nil {
		if cerr := q.getScoreByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScoreByIDStmt: %w", cerr)
		}
	}
	if q.getScoresByDelegateIDStmt != nil {
		if cerr := q.getScoresByDelegateIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScoresByDelegateIDStmt: %w", cerr)
		}
	}
	if q.getScoresByParameterIDStmt != nil {
		if cerr := q.getScoresByParameterIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScoresByParameterIDStmt: %w", cerr)
		}
	}
	if q.getSessionByIDStmt != nil {
		if cerr := q.getSessionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByIDStmt: %w", cerr)
		}
	}
	if q.getSessionsByRefreshTokenStmt != nil {
		if cerr := q.getSessionsByRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionsByRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getSessionsByUserIDStmt != nil {
		if cerr := q.getSessionsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionsByUserIDStmt: %w", cerr)
		}
	}
	if q.getSheetByIDStmt != nil {
		if cerr := q.getSheetByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSheetByIDStmt: %w", cerr)
		}
	}
	if q.getSheetWithDetailsByIDStmt != nil {
		if cerr := q.getSheetWithDetailsByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSheetWithDetailsByIDStmt: %w", cerr)
		}
	}
	if q.getSheetsByUserIDStmt != nil {
		if cerr := q.getSheetsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSheetsByUserIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.touchScoreSheetStmt != nil {
		if cerr := q.touchScoreSheetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing touchScoreSheetStmt: %w", cerr)
		}
	}
	if q.updateDelegateNameStmt != nil {
		if cerr := q.updateDelegateNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDelegateNameStmt: %w", cerr)
		}
	}
	if q.updateParameterStmt != nil {
		if cerr := q.updateParameterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateParameterStmt: %w", cerr)
		}
	}
	if q.updateScoreStmt != nil {
		if cerr := q.updateScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateScoreStmt: %w", cerr)
		}
	}
	if q.updateSessionExpirationStmt != nil {
		if cerr := q.updateSessionExpirationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionExpirationStmt: %w", cerr)
		}
	}
	if q.updateSheetStmt != nil {
		if cerr := q.updateSheetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSheetStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.verifyUserEmailStmt != nil {
		if cerr := q.verifyUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing verifyUserEmailStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                    DBTX
	tx                                    *sql.Tx
	createAISessionStmt                   *sql.Stmt
	createDelegateStmt                    *sql.Stmt
	createParameterStmt                   *sql.Stmt
	createScoreStmt                       *sql.Stmt
	createSessionStmt                     *sql.Stmt
	createSheetStmt                       *sql.Stmt
	createUserStmt                        *sql.Stmt
	deleteDelegateStmt                    *sql.Stmt
	deleteExpiredAISessionsStmt           *sql.Stmt
	deleteParameterStmt                   *sql.Stmt
	deleteScoreStmt                       *sql.Stmt
	deleteSessionByIDStmt                 *sql.Stmt
	deleteSessionsByUserIDStmt            *sql.Stmt
	deleteSheetStmt                       *sql.Stmt
	deleteSheetsByUserIDStmt              *sql.Stmt
	deleteUserStmt                        *sql.Stmt
	getAISessionsByUserIDStmt             *sql.Stmt
	getDelegateByIDStmt                   *sql.Stmt
	getDelegateByScoreSheetIDAndNameStmt  *sql.Stmt
	getDelegatesByScoreSheetIDStmt        *sql.Stmt
	getParameterByIDStmt                  *sql.Stmt
	getParameterByScoreSheetIDAndNameStmt *sql.Stmt
	getParametersByScoreSheetIDStmt       *sql.Stmt
	getScoreByIDStmt                      *sql.Stmt
	getScoresByDelegateIDStmt             *sql.Stmt
	getScoresByParameterIDStmt            *sql.Stmt
	getSessionByIDStmt                    *sql.Stmt
	getSessionsByRefreshTokenStmt         *sql.Stmt
	getSessionsByUserIDStmt               *sql.Stmt
	getSheetByIDStmt                      *sql.Stmt
	getSheetWithDetailsByIDStmt           *sql.Stmt
	getSheetsByUserIDStmt                 *sql.Stmt
	getUserByEmailStmt                    *sql.Stmt
	getUserByIDStmt                       *sql.Stmt
	touchScoreSheetStmt                   *sql.Stmt
	updateDelegateNameStmt                *sql.Stmt
	updateParameterStmt                   *sql.Stmt
	updateScoreStmt                       *sql.Stmt
	updateSessionExpirationStmt           *sql.Stmt
	updateSheetStmt                       *sql.Stmt
	updateUserStmt                        *sql.Stmt
	verifyUserEmailStmt                   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                    tx,
		tx:                                    tx,
		createAISessionStmt:                   q.createAISessionStmt,
		createDelegateStmt:                    q.createDelegateStmt,
		createParameterStmt:                   q.createParameterStmt,
		createScoreStmt:                       q.createScoreStmt,
		createSessionStmt:                     q.createSessionStmt,
		createSheetStmt:                       q.createSheetStmt,
		createUserStmt:                        q.createUserStmt,
		deleteDelegateStmt:                    q.deleteDelegateStmt,
		deleteExpiredAISessionsStmt:           q.deleteExpiredAISessionsStmt,
		deleteParameterStmt:                   q.deleteParameterStmt,
		deleteScoreStmt:                       q.deleteScoreStmt,
		deleteSessionByIDStmt:                 q.deleteSessionByIDStmt,
		deleteSessionsByUserIDStmt:            q.deleteSessionsByUserIDStmt,
		deleteSheetStmt:                       q.deleteSheetStmt,
		deleteSheetsByUserIDStmt:              q.deleteSheetsByUserIDStmt,
		deleteUserStmt:                        q.deleteUserStmt,
		getAISessionsByUserIDStmt:             q.getAISessionsByUserIDStmt,
		getDelegateByIDStmt:                   q.getDelegateByIDStmt,
		getDelegateByScoreSheetIDAndNameStmt:  q.getDelegateByScoreSheetIDAndNameStmt,
		getDelegatesByScoreSheetIDStmt:        q.getDelegatesByScoreSheetIDStmt,
		getParameterByIDStmt:                  q.getParameterByIDStmt,
		getParameterByScoreSheetIDAndNameStmt: q.getParameterByScoreSheetIDAndNameStmt,
		getParametersByScoreSheetIDStmt:       q.getParametersByScoreSheetIDStmt,
		getScoreByIDStmt:                      q.getScoreByIDStmt,
		getScoresByDelegateIDStmt:             q.getScoresByDelegateIDStmt,
		getScoresByParameterIDStmt:            q.getScoresByParameterIDStmt,
		getSessionByIDStmt:                    q.getSessionByIDStmt,
		getSessionsByRefreshTokenStmt:         q.getSessionsByRefreshTokenStmt,
		getSessionsByUserIDStmt:               q.getSessionsByUserIDStmt,
		getSheetByIDStmt:                      q.getSheetByIDStmt,
		getSheetWithDetailsByIDStmt:           q.getSheetWithDetailsByIDStmt,
		getSheetsByUserIDStmt:                 q.getSheetsByUserIDStmt,
		getUserByEmailStmt:                    q.getUserByEmailStmt,
		getUserByIDStmt:                       q.getUserByIDStmt,
		touchScoreSheetStmt:                   q.touchScoreSheetStmt,
		updateDelegateNameStmt:                q.updateDelegateNameStmt,
		updateParameterStmt:                   q.updateParameterStmt,
		updateScoreStmt:                       q.updateScoreStmt,
		updateSessionExpirationStmt:           q.updateSessionExpirationStmt,
		updateSheetStmt:                       q.updateSheetStmt,
		updateUserStmt:                        q.updateUserStmt,
		verifyUserEmailStmt:                   q.verifyUserEmailStmt,
	}
}
